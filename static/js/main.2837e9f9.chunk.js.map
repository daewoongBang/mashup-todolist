{"version":3,"sources":["components/TodoTemplate.tsx","contexts/TodoContext.tsx","components/TodoHead.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoCreate.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","TodosStateContext","createContext","undefined","TodosDispatchContext","todosReducer","state","action","type","nextId","Math","max","map","todo","id","concat","text","done","filter","Error","TodosContextProvider","useReducer","todos","dispatch","Provider","value","useTodosState","useContext","useTodosDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","React","memo","onClick","TodoListBlock","TodoList","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","onSubmit","e","preventDefault","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2837e9f9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n\n  margin: 0 auto;\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TodoTemplate = ({ children }: { children: React.ReactNode }) => {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n};\n\nexport default TodoTemplate;\n","import React, { createContext, Dispatch, useReducer, useContext } from 'react';\n\nexport type Todo = {\n  id: number;\n  text: string;\n  done: boolean;\n};\n\ntype TodosState = Todo[];\n\n// Provider를 사용하지 않았을 때에는 Context 값이 undefined가 되어야 하므로\n// TodosState, undefined 둘다 고려.\nconst TodosStateContext = createContext<TodosState | undefined>(undefined);\n\ntype Action =\n  | { type: 'CREATE'; text: string }\n  | { type: 'TOGGLE'; id: number }\n  | { type: 'REMOVE'; id: number };\n\ntype TodosDispatch = Dispatch<Action>;\nconst TodosDispatchContext = createContext<TodosDispatch | undefined>(\n  undefined,\n);\n\nconst todosReducer = (state: TodosState, action: Action): TodosState => {\n  switch (action.type) {\n    case 'CREATE':\n      const nextId = Math.max(...state.map(todo => todo.id)) + 1;\n      return state.concat({\n        id: nextId,\n        text: action.text,\n        done: false,\n      });\n    case 'TOGGLE':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n      );\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n    default:\n      throw new Error('Unhandled action');\n  }\n};\n\nexport const TodosContextProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const [todos, dispatch] = useReducer(todosReducer, [\n    {\n      id: 1,\n      text: '프로젝트 생성하기',\n      done: true,\n    },\n    {\n      id: 2,\n      text: 'Component 만들기 및 스타일링하기',\n      done: true,\n    },\n    {\n      id: 3,\n      text: 'Context 만들기',\n      done: false,\n    },\n  ]);\n\n  return (\n    <TodosDispatchContext.Provider value={dispatch}>\n      <TodosStateContext.Provider value={todos}>\n        {children}\n      </TodosStateContext.Provider>\n    </TodosDispatchContext.Provider>\n  );\n};\n\nexport const useTodosState = () => {\n  const state = useContext(TodosStateContext);\n  if (!state) throw new Error('TodosProvider not found');\n  return state;\n};\n\nexport const useTodosDispatch = () => {\n  const dispatch = useContext(TodosDispatchContext);\n  if (!dispatch) throw new Error('TodosProvider not found');\n  return dispatch;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodosState } from '../contexts/TodoContext';\n\nconst TodoHeadBlock = styled.div`\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  .tasks-left {\n    color: #20c997;\n    font-size: 18px;\n    margin-top: 40px;\n    font-weight: bold;\n  }\n`;\n\nconst TodoHead = () => {\n  const todos = useTodosState();\n  const undoneTasks = todos.filter(todo => !todo.done);\n\n  const today = new Date();\n  const dateString = today.toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n  const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\n\n  return (\n    <TodoHeadBlock>\n      <h1>{dateString}</h1>\n      <div className=\"day\">{dayName}</div>\n      <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\n    </TodoHeadBlock>\n  );\n};\n\nexport default TodoHead;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodosDispatch } from '../contexts/TodoContext';\n\ninterface defaultProps {\n  done: Boolean;\n}\ninterface TodoItemProps extends defaultProps {\n  id: number;\n  text: string;\n}\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  display: none;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  /* TodoItemBlock 위에 커서를 올렸을 때, Remove Component 표시 */\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div<defaultProps>`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\n\nconst Text = styled.div<defaultProps>`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nconst TodoItem = ({ id, done, text }: TodoItemProps) => {\n  const dispatch = useTodosDispatch();\n  const onToggle = () => dispatch({ type: 'TOGGLE', id });\n  const onRemove = () => dispatch({ type: 'REMOVE', id });\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={onToggle}>\n        {done && <MdDone />}\n      </CheckCircle>\n      <Text done={done}>{text}</Text>\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  );\n};\n\n// React.memo - 다른 항목이 업데이트 될 때, 불필요한 리렌더링을 방지하게 되어 성능 최적화 가능\nexport default React.memo(TodoItem);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodosState } from '../contexts/TodoContext';\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\nconst TodoList = () => {\n  const todos = useTodosState();\n\n  return (\n    <TodoListBlock>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n        />\n      ))}\n    </TodoListBlock>\n  );\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodosDispatch } from '../contexts/TodoContext';\n\ninterface CircleButtonProp {\n  open: boolean;\n}\n\nconst CircleButton = styled.button<CircleButtonProp>`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n  }\n  &:active {\n    background: #20c997;\n  }\n\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  display: block;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: 0.125s all ease-in;\n  ${props =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding-left: 32px;\n  padding-top: 32px;\n  padding-right: 32px;\n  padding-bottom: 72px;\n\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\nconst TodoCreate = () => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n\n  const dispatch = useTodosDispatch();\n\n  const onToggle = (): void => setOpen(!open);\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(e.target.value);\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); // 새로고침 방지\n    dispatch({ type: 'CREATE', text: value });\n    setValue('');\n    setOpen(false);\n  };\n\n  return (\n    <>\n      {open && (\n        <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input\n              autoFocus\n              placeholder=\"할 일을 입력 후, Enter를 누르세요.\"\n              onChange={onChange}\n            />\n          </InsertForm>\n        </InsertFormPositioner>\n      )}\n      <CircleButton onClick={onToggle} open={open}>\n        <MdAdd />\n      </CircleButton>\n    </>\n  );\n};\n\nexport default React.memo(TodoCreate);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodosContextProvider } from './contexts/TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <TodosContextProvider>\n        <GlobalStyle />\n        <TodoTemplate>\n          <TodoHead />\n          <TodoList />\n          <TodoCreate />\n        </TodoTemplate>\n      </TodosContextProvider>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}